!function(t){function e(r){if(n[r])return n[r].exports;var s=n[r]={exports:{},id:r,loaded:!1};return t[r].call(s.exports,s,s.exports,e),s.loaded=!0,s.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";var r=n(1).sortAscending,s=n(1).shuffle;describe("card game",function(){beforeEach(function(){this.cards=[{suit:"♠",rank:"2"},{suit:"♠",rank:"A"},{suit:"♦",rank:"8"},{suit:"♦",rank:"9"},{suit:"♦",rank:"4"},{suit:"♦",rank:"5"},{suit:"♣",rank:"K"},{suit:"♣",rank:"10"},{suit:"♣",rank:"J"},{suit:"♣",rank:"Q"}]}),describe("function: shuffle",function(){beforeEach(function(){this.result=s(this.cards)}),it("returns cards in a different order",function(){expect(this.result).not.toEqual(this.cards)}),it("returns a different order each time",function(){expect(this.result).not.toEqual(s(this.cards))}),it("returns the same number as given",function(){expect(this.result.count).toBe(this.cards.length)}),it("includes all the cards",function(){this.cards.forEach(function(t){expect(this.result).toContain(t)})})}),describe("function: sortAscending",function(){function t(t,e){return t.filter(function(t){return t.suit===e}).map(function(t){return t.suit})}function e(t){var e=[];for(var n in result)result[n-1].suit!==result[n].suit&&e.push(result[n].suit);return e}beforeEach(function(){this.result=r(this.cards)}),it("returns cards grouped by suits ♠, ♣, ♥ then ♦",function(){expect(e(this.result)).toEqual(["♠","♣","♥","♦"])}),it("returns the rank numbers in order",function(){expect(t(this.result,"♦")).toEqual(["4","5","6","9"])}),it("returns rank ace before two",function(){expect(t(this.result,"♠")).toEqual(["A","2"])}),it("returns cards for a rank by 10, jack, king then queen",function(){expect(t(this.result,"♣")).toEqual(["10","J","Q","K"])}),it("returns cards in same order even after shuffling",function(){expect(this.result).toEqual(s(this.result))}),it("returns the same number as given",function(){expect(this.result.count).toBe(this.cards.length)}),it("includes all the cards",function(){this.cards.forEach(function(t){expect(this.result).toContain(t)})})})})},function(t,e){"use strict";t.exports={shuffle:function(){},sortAscending:function(){}}}]);